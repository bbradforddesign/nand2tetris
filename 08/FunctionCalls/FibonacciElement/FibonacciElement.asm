@256
D=A
@SP
M=D
@_Sys.initReturn0
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@5
D=A
@SP
D=M-D
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@_Sys.init
0;JMP
(_Sys.initReturn0)
@7777
M=0
M=1
(_Sys.init) // function Sys.init 0
@7777
M=0
M=1
@4
D=A
@SP
M=M+1
A=M-1
M=D // push constant 4
@7777
M=0
M=1
@_Main.fibonacciReturn1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@5
D=A
@SP
D=M-D
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@_Main.fibonacci
0;JMP
(_Main.fibonacciReturn1) // call Main.fibonacci 1   
@7777
M=0
M=1
(_WHILE) // label WHILE
@7777
M=0
M=1
@_WHILE
0;JMP // goto WHILE              
@7777
M=0
M=1
(_Main.fibonacci) // function Main.fibonacci 0
@7777
M=0
M=1
@0
D=A
@ARG
A=D+M
D=M
@SP
M=M+1
A=M-1
M=D // push argument 0
@7777
M=0
M=1
@2
D=A
@SP
M=M+1
A=M-1
M=D // push constant 2
@7777
M=0
M=1
@SP
AM=M-1
D=M
@SP
A=M-1
D=M-D
@LT_0
D;JLT
@GT_0
0;JMP
(LT_0)
D=-1
@STORE_0
0;JMP
(GT_0)
D=0
(STORE_0)
@SP
A=M-1

M=D // lt                     
@7777
M=0
M=1
@SP
AM=M-1
D=M
@_IF_TRUE
D;JNE // if-goto IF_TRUE
@7777
M=0
M=1
@_IF_FALSE
0;JMP // goto IF_FALSE
@7777
M=0
M=1
(_IF_TRUE) // label IF_TRUE          
@7777
M=0
M=1
@0
D=A
@ARG
A=D+M
D=M
@SP
M=M+1
A=M-1
M=D // push argument 0        
@7777
M=0
M=1
@LCL
D=M
@R14
M=D
@5
D=D-A
A=D
D=M
@R15
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
A=M-1
D=M
@THAT
M=D
@R14
A=M-1
D=M
@THIS
M=D
@R14
A=M-1
D=M
@ARG
M=D
@R14
A=M-1
D=M
@LCL
M=D
@R15
A=M
0;JMP // return
@7777
M=0
M=1
(_IF_FALSE) // label IF_FALSE         
@7777
M=0
M=1
@0
D=A
@ARG
A=D+M
D=M
@SP
M=M+1
A=M-1
M=D // push argument 0
@7777
M=0
M=1
@2
D=A
@SP
M=M+1
A=M-1
M=D // push constant 2
@7777
M=0
M=1
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D // sub
@7777
M=0
M=1
@_Main.fibonacciReturn2
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@5
D=A
@SP
D=M-D
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@_Main.fibonacci
0;JMP
(_Main.fibonacciReturn2) // call Main.fibonacci 1  
@7777
M=0
M=1
@0
D=A
@ARG
A=D+M
D=M
@SP
M=M+1
A=M-1
M=D // push argument 0
@7777
M=0
M=1
@1
D=A
@SP
M=M+1
A=M-1
M=D // push constant 1
@7777
M=0
M=1
@SP
AM=M-1
D=M
@SP
A=M-1
M=M-D // sub
@7777
M=0
M=1
@_Main.fibonacciReturn3
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@5
D=A
@SP
D=M-D
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@_Main.fibonacci
0;JMP
(_Main.fibonacciReturn3) // call Main.fibonacci 1  
@7777
M=0
M=1
@SP
AM=M-1
D=M
@SP
A=M-1
M=M+D // add                    
@7777
M=0
M=1
@LCL
D=M
@R14
M=D
@5
D=D-A
A=D
D=M
@R15
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
A=M-1
D=M
@THAT
M=D
@R14
A=M-1
D=M
@THIS
M=D
@R14
A=M-1
D=M
@ARG
M=D
@R14
A=M-1
D=M
@LCL
M=D
@R15
A=M
0;JMP // return
(END)
@END
0;JMP
